/*!
 * PENTAHO CORPORATION PROPRIETARY AND CONFIDENTIAL
 *
 * Copyright 2002 - 2015 Pentaho Corporation (Pentaho). All rights reserved.
 *
 * NOTICE: All information including source code contained herein is, and
 * remains the sole property of Pentaho and its licensors. The intellectual
 * and technical concepts contained herein are proprietary and confidential
 * to, and are trade secrets of Pentaho and may be covered by U.S. and foreign
 * patents, or patents in process, and are protected by trade secret and
 * copyright laws. The receipt or possession of this source code and/or related
 * information does not convey or imply any rights to reproduce, disclose or
 * distribute its contents, or to manufacture, use, or sell anything that it
 * may describe, in whole or in part. Any reproduction, modification, distribution,
 * or public display of this information without the express written authorization
 * from Pentaho is strictly prohibited and in violation of applicable laws and
 * international treaties. Access to the source code contained herein is strictly
 * prohibited to anyone except those individuals and entities who have executed
 * confidentiality and non-disclosure agreements or other agreements with Pentaho,
 * explicitly covering such access.
 */

package com.pentaho.model.metrics.contributor.metricManager.impl;

import com.pentaho.model.metrics.contributor.Constants;
import com.pentaho.model.metrics.contributor.metricManager.impl.metrics.CategoricalHolder;
import com.pentaho.profiling.api.MessageUtils;
import com.pentaho.profiling.api.MutableProfileFieldValueType;
import com.pentaho.profiling.api.ProfileFieldProperty;
import com.pentaho.profiling.api.ProfileFieldValueType;
import com.pentaho.profiling.api.action.ProfileActionException;
import com.pentaho.profiling.api.metrics.MetricContributorUtils;
import com.pentaho.profiling.api.metrics.MetricManagerContributor;
import com.pentaho.profiling.api.metrics.MetricMergeException;
import com.pentaho.profiling.api.metrics.field.DataSourceFieldValue;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Created by mhall on 28/01/15.
 */
public class CategoricalMetricContributor extends BaseMetricManagerContributor implements MetricManagerContributor {
  public static final String KEY_PATH =
    MessageUtils.getId( Constants.KEY, CategoricalMetricContributor.class );
  public static final String SIMPLE_NAME = CategoricalMetricContributor.class.getSimpleName();
  public static final ProfileFieldProperty CATEGORICAL_FIELD = MetricContributorUtils
    .createMetricProperty( KEY_PATH, SIMPLE_NAME, SIMPLE_NAME,
      MetricContributorUtils.CATEGORICAL );
  private int distinctAllowed = 100;

  public int getDistinctAllowed() {
    return distinctAllowed;
  }

  public void setDistinctAllowed( int distinctAllowed ) {
    this.distinctAllowed = distinctAllowed;
  }

  private CategoricalHolder getOrCreateCategoricalHolder( MutableProfileFieldValueType mutableProfileFieldValueType ) {
    CategoricalHolder result = (CategoricalHolder) mutableProfileFieldValueType.getValueTypeMetrics( SIMPLE_NAME );
    if ( result == null ) {
      result = new CategoricalHolder( distinctAllowed, new HashMap<String, Long>() );
      mutableProfileFieldValueType.setValueTypeMetrics( SIMPLE_NAME, result );
    }
    return result;
  }

  @Override public Set<String> supportedTypes() {
    HashSet<String> types = new HashSet<String>( Arrays.asList( String.class.getCanonicalName() ) );
    types.addAll( NumericMetricContributor.getTypesStatic() );
    return types;
  }

  @Override
  public void process( MutableProfileFieldValueType mutableProfileFieldValueType,
                       DataSourceFieldValue dataSourceFieldValue )
    throws ProfileActionException {
    getOrCreateCategoricalHolder( mutableProfileFieldValueType )
      .addEntry( String.valueOf( dataSourceFieldValue.getFieldValue() ) );
  }

  @Override public void merge( MutableProfileFieldValueType mutableProfileFieldValueType,
                               ProfileFieldValueType profileFieldValueType )
    throws MetricMergeException {
    CategoricalHolder from = (CategoricalHolder) profileFieldValueType.getValueTypeMetrics( SIMPLE_NAME );
    if ( from != null ) {
      CategoricalHolder into = getOrCreateCategoricalHolder( mutableProfileFieldValueType );
      into.add( from );
    }
  }

  @Override public List<ProfileFieldProperty> profileFieldProperties() {
    return Arrays.asList( CATEGORICAL_FIELD );
  }

  //OperatorWrap isn't helpful for autogenerated methods
  //CHECKSTYLE:OperatorWrap:OFF
  @Override public boolean equals( Object o ) {
    if ( this == o ) {
      return true;
    }
    if ( o == null || getClass() != o.getClass() ) {
      return false;
    }

    CategoricalMetricContributor that = (CategoricalMetricContributor) o;

    return distinctAllowed == that.distinctAllowed;

  }

  @Override public int hashCode() {
    return distinctAllowed;
  }

  @Override public String toString() {
    return "CategoricalMetricContributor{" +
      "distinctAllowed=" + distinctAllowed +
      "} " + super.toString();
  }
  //CHECKSTYLE:OperatorWrap:ON
}
