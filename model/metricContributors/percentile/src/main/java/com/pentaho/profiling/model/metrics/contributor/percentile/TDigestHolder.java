/*!
 * PENTAHO CORPORATION PROPRIETARY AND CONFIDENTIAL
 *
 * Copyright 2002 - 2015 Pentaho Corporation (Pentaho). All rights reserved.
 *
 * NOTICE: All information including source code contained herein is, and
 * remains the sole property of Pentaho and its licensors. The intellectual
 * and technical concepts contained herein are proprietary and confidential
 * to, and are trade secrets of Pentaho and may be covered by U.S. and foreign
 * patents, or patents in process, and are protected by trade secret and
 * copyright laws. The receipt or possession of this source code and/or related
 * information does not convey or imply any rights to reproduce, disclose or
 * distribute its contents, or to manufacture, use, or sell anything that it
 * may describe, in whole or in part. Any reproduction, modification, distribution,
 * or public display of this information without the express written authorization
 * from Pentaho is strictly prohibited and in violation of applicable laws and
 * international treaties. Access to the source code contained herein is strictly
 * prohibited to anyone except those individuals and entities who have executed
 * confidentiality and non-disclosure agreements or other agreements with Pentaho,
 * explicitly covering such access.
 */

package com.pentaho.profiling.model.metrics.contributor.percentile;

import com.clearspring.analytics.stream.quantile.TDigest;

import java.nio.ByteBuffer;

/**
 * Created by bryan on 3/11/15.
 */
public class TDigestHolder implements Cloneable {
  private TDigest tDigest;

  public TDigestHolder() {
    this( null );
  }

  public TDigestHolder( TDigest tDigest ) {
    this.tDigest = tDigest;
  }

  public synchronized byte[] getBytes() {
    ByteBuffer byteBuffer = ByteBuffer.allocate( tDigest.byteSize() );
    tDigest.asBytes( byteBuffer );
    byteBuffer.flip();
    byte[] bytes = new byte[ byteBuffer.limit() ];
    byteBuffer.get( bytes );
    return bytes;
  }

  public synchronized void setBytes( byte[] bytes ) {
    ByteBuffer byteBuffer = ByteBuffer.wrap( bytes );
    tDigest = TDigest.fromBytes( byteBuffer );
  }

  public synchronized void add( double x ) {
    tDigest.add( x );
  }

  public synchronized void add( TDigestHolder other ) {
    tDigest.add( other.tDigest );
  }

  public synchronized double quantile( double percentile ) {
    return tDigest.quantile( percentile );
  }

  @Override protected synchronized Object clone() throws CloneNotSupportedException {
    TDigestHolder result = (TDigestHolder) super.clone();
    if ( tDigest != null ) {
      result.setBytes( getBytes() );
    }
    return result;
  }

  //OperatorWrap isn't helpful for autogenerated methods
  //CHECKSTYLE:OperatorWrap:OFF
  @Override
  public boolean equals( Object o ) {
    if ( this == o ) {
      return true;
    }
    if ( o == null || getClass() != o.getClass() ) {
      return false;
    }

    TDigestHolder that = (TDigestHolder) o;

    if ( tDigest != null ? !tDigest.equals( that.tDigest ) : that.tDigest != null ) {
      return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return tDigest != null ? tDigest.hashCode() : 0;
  }

  @Override public String toString() {
    return "TDigestHolder{" +
      "tDigest=" + tDigest +
      '}';
  }
  //CHECKSTYLE:OperatorWrap:ON
}
